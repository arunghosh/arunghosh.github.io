{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/rule-based-chatbot-from-scratch-using-reactjs-and-nodejs-p1","result":{"data":{"markdownRemark":{"id":"e2504dbb-ef5e-5ee6-a896-b17cc1f62aa0","html":"<p>During <a href=\"https://en.wikipedia.org/wiki/2020_coronavirus_lockdown_in_India\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Covid-19 lockdown in India</a>, I was working on an e-commerce web application. The work was mostly maintenance, which was hard to keep you interested during a time when you are surrounded by the pandemic news.</p>\n<p>As a saviour there came a requirement. It was to create a chatbot that can</p>\n<ol>\n<li>\n<p>Handle customer issues like</p>\n<ul>\n<li>refund issue</li>\n<li>issue with placing order </li>\n<li>other order related issues  </li>\n</ul>\n</li>\n<li>Assist shopping by helping find the products and offers</li>\n</ol>\n<p>It came as a blessing since I can shift my focus on something other than the news and trolls.</p>\n<p>From the requirements it was a <strong>rule-based</strong> chatbot. The conversation will be driven by the bot, i.e. the bot will ask some questions and provide the user with options. User can select and options and based on the option selected the bot will decide on the subsequent message. So it is more of <strong>Conversational User Interface(CUI)</strong> than a fully fledged chatbot.</p>\n<p>To realise the requirement I had 2 options</p>\n<ol>\n<li>Use an existing platforms like <a href=\"https://yellowmessenger.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yellow Messenger</a>, <a href=\"https://dialogflow.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dialogflow</a> or</li>\n<li>Create a custom chatbot from scratch</li>\n</ol>\n<p>I choose the latter. Why? Because it gives you</p>\n<ul>\n<li>More flexibility</li>\n<li>More learning opportunity</li>\n<li>More Challenge</li>\n</ul>\n<p>This article will explain the basic backend design of the chatbot. The technology I choose was <code class=\"language-text\">ReactJS</code> and <code class=\"language-text\">NestJS</code>. The main reason being, I am comfortable with these and there is no need to switch context since both are JavaScript.</p>\n<h2 id=\"conversation-contextstate\" style=\"position:relative;\"><a href=\"#conversation-contextstate\" aria-label=\"conversation contextstate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conversation context/state</h2>\n<p>Now let us get into the basic steps in the chatbot conversation</p>\n<ol>\n<li>The conversation is initiated by the bot.</li>\n<li>The bot provides user with text and set of options.</li>\n<li>User selects an option.</li>\n<li>Bot processes user option and sends response.</li>\n</ol>\n<p>In last step, where the bot process the user input, the application need <code class=\"language-text\">chat context/state</code>. This need to be persisted in the server-side against the current user session. It is more like a user session.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">session_id => (user chat context/state)</code></pre></div>\n<p>For that each conversation will have a <code class=\"language-text\">session id</code> and the <code class=\"language-text\">state</code> will be stored against it.</p>\n<p>The state should have</p>\n<ul>\n<li>User information like user ID and name.</li>\n<li>What is the aim/intent of the conversation. For example initially the intent of the bot is to find what help the user need. If the user selects “refund issue”, then the intent is to resolve refund issue.</li>\n</ul>\n<p>The state should have all the information required for the conversation. And so as of now we know that the session will have details on the user and intent.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    session<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  intent<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    current<span class=\"token operator\">:</span> IntentType<span class=\"token punctuation\">;</span>\n    stack<span class=\"token operator\">:</span> IntentType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"intent\" style=\"position:relative;\"><a href=\"#intent\" aria-label=\"intent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intent</h2>\n<p>Since the conversation is driven by the bot, at any point of the conversation the bot will have an <code class=\"language-text\">intent</code>. For example resolve refund issue, provide offer details, welcome user.</p>\n<p>An intent can have many steps. For example, an solve refund issue bot need to:</p>\n<ol>\n<li>Send an apology for the issue.</li>\n<li>Find the order having the issue.</li>\n<li>Find analyze situation and send a response.</li>\n</ol>\n<p>This requires to have <code class=\"language-text\">current intent</code> and <code class=\"language-text\">intent stack</code>. So the intent information within the state will look like</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">{</span>\n    intent<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Current intent</span>\n        <span class=\"token comment\">// Ex: Resolve Refund Issue</span>\n        current<span class=\"token operator\">:</span> <span class=\"token string\">\"resolve_refund_issue\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// The intent stack</span>\n        stack<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So what is this current and stack? Let’s take an example ~ if the intent is the resolve refund issue, first we will be sending a sorry message.</p>\n<p>Initially when you send the intent as <code class=\"language-text\">resolve_refund_issue</code> the state will look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">current<span class=\"token operator\">:</span> <span class=\"token string\">\"resolve_refund_issue\"</span><span class=\"token punctuation\">,</span>\nstack<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Now the prerequisite of the intent will look like </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">prerequisite<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"send_sorry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"select_order\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p> So first we need to send the sorry message. To do this we stack the current intent and sent the current intent to <code class=\"language-text\">send_sorry</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">current<span class=\"token operator\">:</span> <span class=\"token string\">\"send_sorry\"</span><span class=\"token punctuation\">,</span>\nstack<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"resolve_refund_issue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>It is like calling one function from another function. So similar to how call stack work. But the call stack is much more complicated.</p>\n<p>So now the state with user information and intent will look </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    session<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  intent<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    current<span class=\"token operator\">:</span> IntentType<span class=\"token punctuation\">;</span>\n    stack<span class=\"token operator\">:</span> IntentType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"intent-handler\" style=\"position:relative;\"><a href=\"#intent-handler\" aria-label=\"intent handler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intent handler</h2>\n<p>Each intent will have a handler associated with it. Intent handler will have following </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IIntentHandler</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// the prerequisites for the handler to work. For example the refund issue requires to send a sorry message and select an order</span>\n  prerequisites<span class=\"token operator\">:</span> IntentType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// updateState takes in the state and user input and returns the updated state</span>\n  <span class=\"token function-variable function\">updateState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg0<span class=\"token operator\">:</span> IState<span class=\"token punctuation\">,</span> arg1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// getMessage takes in state and provides message for the user</span>\n  <span class=\"token function-variable function\">getMessage</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg0<span class=\"token operator\">:</span> IState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> IMessage<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong><code class=\"language-text\">prerequisites</code></strong> is an array of intents. These intents should be satisfied before you can execute the current intent. For example <code class=\"language-text\">refund_issue</code> can have prerequisite like <code class=\"language-text\">send_sorry</code> and <code class=\"language-text\">find_order_having_issue</code>. So as mentioned in the previous section when you need to execute <code class=\"language-text\">send_sorry</code>, you will make this the current intent and stack <code class=\"language-text\">refund_issue</code>. It is like calling one function from another function.</p>\n<p>The <strong><code class=\"language-text\">updateState</code></strong> function takes in the current state and the user input and updates the state based on these two parameters. For example <code class=\"language-text\">updateState</code> for <code class=\"language-text\">select_order</code> intent will </p>\n<ol>\n<li>First update the state with the orders placed by the users for the purpose of asking user to select order. </li>\n<li>When the user selects the order, <code class=\"language-text\">updateState</code> shall update the state with the selected order.</li>\n</ol>\n<p>The state can have an <code class=\"language-text\">execute</code> and <code class=\"language-text\">heap</code> object to store the details on the execution, like list of orders, selected orders &#x26; status of execution.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">{</span>\n  execute_status<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      select_order<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n      success<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  heap<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    select_order<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      orders<span class=\"token operator\">:</span> object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong><code class=\"language-text\">getMessage</code></strong> function will return the message for the handler. The message will have text and options`<code class=\"language-text\"></code>typescript\ninterface IMessage {\ntexts: string[];\noptions?: {\ntext: string,\nid: string,\n};\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A simple `getMessage` that requests user to select a brand will look like.\n```javascript\ngetMessage: state =&gt; {\n  return {\n    texts: [&#39;Which brand do you wish to explore?&#39;],\n    options: [\n      {\n        text: &#39;Wrogn Mens fashion by Virat Kholi&#39;,\n        id: &#39;wrogn&#39;,\n      },\n      {\n        text: &#39;HRX Mens fashion by Hrithik Roshan&#39;,\n        id: &#39;hrx&#39;,\n      },\n    ],\n  };</code></pre></div>\n<p>The above example since a simple case is not consuming the state. But there are usecases where in we need to use state to return appropriate message to the user.</p>","fields":{"slug":"/posts/rule-based-chatbot-from-scratch-using-reactjs-and-nodejs-p1","tagSlugs":["/tag/chatbot/","/tag/conversation-ui/"]},"frontmatter":{"date":"2020-04-30T22:40:32.169Z","description":"This gives you pointers on how to create a rule-based chatbot from scratch","tags":["Chatbot","Conversation UI"],"title":"Rule-based chatbot from scratch using ReactJS and NodeJS","socialImage":null}}},"pageContext":{"slug":"/posts/rule-based-chatbot-from-scratch-using-reactjs-and-nodejs-p1"}}}